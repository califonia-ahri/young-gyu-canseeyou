112.py --> 눈 좌표값 얻기 
////// 최소 100개의 사진정도 필요
eye_cord.csv

114.py --> DBSCAN Clustering 통해서 잘못나온 좌표 없애기
eye_trace_scope_data.csv

112--> 114 통해서 눈 가동영역 확보 //// !!눈을 한바퀴 굴려주세요.

 //////// 밑으론 머신러닝 기반//////////

112 -- >115  앞의 절차로 데이터 얻음  //// !!눈을 다시 한바퀴 굴려주세요.

////// 최소 100개의 사진정도 필요
이미지 좌표를 구하고 눈 좌표값이 눈 가동영역 안에 있으면 데이터 저장
eye_trace_on_focus_scope_data.csv
focus 값은 0이면 집중, 1이면 눈 범위, 2는 눈 범위 바깥으로 설정함.
여기선 이미지를  1,2로 분류

112 --> 116 다시 앞의 절차로 눈의 집중범위 확보  //  !!사용하시는 영역을 훑어주세요

////// 최소 100개의 사진정도 필요

여기선 이미지를  0,1로 분류

/////////////////////////////
117 --> 사진으로 눈 좌표값 얻기 // 이미지 디렉토리 경로 넣기
--> path + eye_cord.csv
114 --> DBSCAN Clustering // eye_cord1.csv 경로 넣기
--> eye_trace_scope_data.csv 
// eye_cord1.csv 삭제 ㅇㅇ


117 --> 사진으로 눈 좌표값 얻기 // 이미지들이 있는 디렉토리 경로 넣기
--> eye_cord1.csv
115 --> // eye_trace_scope_data.csv 경로 , eye_cord.csv , 파일 경로 넣기
--> eye_trace_on_focus_scope_data.csv 
// eye_cord.csv 삭제 ㅇㅇ


117 --> 사진으로 눈 좌표값 얻기 // 이미지 디렉토리 경로 넣기
--> eye_cord.csv
116 --> //  eye_trace_on_focus_scope_data.csv 경로, eye_cord1.csv 넣기
 // eye_cord.csv 삭제 ㅇㅇ


#########################################################
shape_predictor_68_face_landmarks.dat haarcascade_eye_tree_eyeglasses.xml 파일은 해당 디렉토리에 있으면 됨
수정할려면 get_eye_cord.py의 
	predictor = dlib.shape_predictor(
		"C:\\anaconda3\\envs\\119pj\\shape_predictor_68_face_landmarks.dat") 

	eye_cascade = cv2.CascadeClassifier(
       		 "C:\\119pj\\haarcascade_eye_tree_eyeglasses.xml")  이부분 수정하면 됨.
ml.py --> get_ml_path(address) address는 디렉토리 경로로 ml.pkl 경로 리턴
get_focus_int_by_ml(address,address_4) address는 디렉토리 경로, address_4는 ml.pkl경로, focus값(0,1,2)리턴
#########################################################
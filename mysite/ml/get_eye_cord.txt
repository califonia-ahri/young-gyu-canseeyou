def get_img_per_5s(address):
    import cv2
    import time
    print("Watch your cam, Get Img in 3 sec")
    for i in range(1, 4):
        time.sleep(1)
        print(i)
    cap = cv2.VideoCapture(0)
    ret, frame = cap.read()
    i = str(i)
    path_address = address + "\\" + i + '.PNG'
    if ret is False:
        exit()
    cv2.imwrite(path_address, frame)
    # print("img saved as %s" % path_address)
    time.sleep(0.1)
    print("Done\n")
def get_img(address) :
    import cv2
    import time
    print("Watch your cam, Get Img in 3 sec")
    for i in range(1,4):
        time.sleep(1)
        print(i)
    cap = cv2.VideoCapture(0)

    for i in range(0, 100):
        ret, frame = cap.read()
        i = str(i)
        path_address = address +"\\"+ i + '.PNG'
        if ret is False:
            break
        cv2.imwrite(path_address, frame)
        #print("img saved as %s" % path_address)
        time.sleep(0.1)
    print("Done\n")

def find_eye_cord(address):
    import cv2
    import numpy as np
    import dlib
    import pandas as pd
    import os
    import matplotlib.pyplot as plt
    import glob
    import time

    global roi
    global cord_list
    global eye_cord
    cord_list = (0, 0) # wrong eye_cord.

    print("Find eye cord")
    detector = dlib.get_frontal_face_detector()
    eye_cascade = cv2.CascadeClassifier("C:\\apis\\mysite\\ml\\haarcascade_eye_tree_eyeglasses.xml")  # use Machine learing by opencv data. if wore eye_glasses.
    predictor = dlib.shape_predictor( "C:\\apis\\mysite\\ml\\shape_predictor_68_face_landmarks.dat")  # using face dlib learing data classified by 68 dot.
    file = '\eye_cord.csv'

    file1 = address + file
    print(file1)
    if not os.path.exists(file): 
        eye_cord = pd.DataFrame( [[0,405,360]],columns = ['num','x_cord' , 'y_cord'],dtype = float)
    else :
        eye_cord = pd.read_csv(file1,sep=",")


    if not glob.glob(address+"\*.PNG"):
        print("There is no Img file")
        print("plz put in Img in %s" % address)
        exit()

    if not os.path.exists(file1):
        #print("no %s file" % file1)
        eye_cord = pd.DataFrame( [[0,405,360]],columns = ['num','x_cord' , 'y_cord'],dtype = float)

    else :
        #print("exist %s file" % file1)
        eye_cord = pd.read_csv(file1,sep=",")

    for img in glob.glob(address + "\*.PNG"):

        index =eye_cord.shape[0]
        frame = cv2.imread(img)
        frame = cv2.resize(frame, (810, 720))
        print("read Img %s" % img)

        gray_roi = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = detector(frame)

        if( len(faces) ==0 ):
            print("Can't find Face in %s Img " % img )
            return file1,cord_list

        roi = frame.copy()


        for face in faces:
            landmarks = predictor(gray_roi, face)

            x1, x2, y1, y2 = face.left(), face.right(), face.top(), face.bottom()
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

            roi = roi[y1:y2, x1:x2]  # cature face by 68dot.
            roi = cv2.resize(roi,(810, 720))

            gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
            eyes = eye_cascade.detectMultiScale(gray_roi)
            if ( len(eyes) < 1 ) :
                print("Can't find eyes in %s Img" % img )
                return file1,cord_list
            else :
                (ex, ey, ew, eh) = eyes[0]

                cv2.rectangle(roi, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
                roi = roi[ey:ey + eh, ex:ex + ew]
                roi = cv2.resize(roi, (810, 720))

                rows, cols, _ = roi.shape
                gray_roi = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
                gray_roi = cv2.GaussianBlur(gray_roi, (7, 7), 0)

                _, threshold = cv2.threshold(gray_roi, 21, 255, cv2.THRESH_BINARY_INV)
                contours, _ = cv2.findContours(threshold, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
                contours = sorted(contours, key=lambda x: cv2.contourArea(x), reverse=True)

                for cnt in contours:
                    (x, y, w, h) = cv2.boundingRect(cnt)
                    # cv2.drawContours(roi, [cnt], -1, (0,0,255),3)
                    cv2.rectangle(roi, (x, y), (x + w, y + h), (255, 0, 0), 2)
                    cv2.line(roi, (x + int(w / 2), 0), (x + int(w / 2), rows), (0, 255, 0), 2)
                    cv2.line(roi, (0, y + int(h / 2)), (cols, y + int(h / 2)), (0, 255, 0), 2)

                    print("result = %d , %d\n"
                          % (x + w / 2,
                             y + h / 2)
                          )
                    eye_cord.loc[index] = [index, x + w / 2, y + h / 2]
                    index += 1
                    break
            break


    print("Done\n")
    eye_cord.to_csv(file1,index_label = ['num'],index=False)

    return file1, cord_list

def del_img (address) :
    import os
    import glob

    print("Del Img")
    file1 = address
    for img in glob.glob(file1+"\*.PNG") :
        os.remove(img)
        #print("remove %s" % img)
    print("Done\n")
